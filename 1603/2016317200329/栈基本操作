#include<stdio.h>
#include<stdlib.h>

typedef struct Stack
{
    int elem[50];
    int top;
}Stack;

void InitStack(Stack *s) //初始化栈
{
    s->top=-1;
}

int IsEmpty(Stack *s)   //判断栈空
{
    if(s->top==-1)
    return 1;
    else return 0;
}

int IsFull(Stack *s)       //判断栈满
{
    if(s->top==50)
    return 1;
    else return 0;
}


int Push(Stack *s,int i)    //入栈,以-1为结束
{
    int m;
    m=IsFull(s);
    if(m==1||i==-1)
    return 0;
    if(m==0)
    {   s->top++;
        s->elem[s->top]=i;
        return 1;
    }
}

int Pop(Stack *s)   //出栈
{
    if(!IsEmpty(s))
    {
       printf("%d  ",s->elem[s->top]);
        s->top--;
        return 1;
    }
    else return 0;
}

void ClearStack(Stack *s)    //清空栈
{
    while(s->top!=-1)
    {
       s->elem[s->top]=0;
       s->top--;
    }
}

int main()
{
    Stack *s=(Stack*)malloc(sizeof(Stack));
    int b=1;
    int i,j,k,n;
    InitStack(s);
    printf("输入栈内元素：");
    while(b)
    {
        scanf("%d",&i);
        b=Push(s,i);
    }
    n=s->top;
    while(Pop(s))
    {

    }
    ClearStack(s);
    if(b=IsEmpty(s))
    printf("\nNow the stack is empty!");
    else printf("The stack is not empty!");
    return 0;

}
